<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Subroutine Hierarchy - Weight with Rotating Dodecagons</title>

<script>
    var canvas;   
    var graphics; 
    var X_LEFT = -4;    
    var X_RIGHT = 4;
    var Y_BOTTOM = -3;
    var Y_TOP = 3;
    var BACKGROUND = "white";  
    var pixelSize;  
    var frameNumber = 0;  

    function drawWorld() {

        graphics.save();
        graphics.scale(1, 1);
        drawWeight("blue");

        // Draw the purple weight on the left of the blue weight with scale 0.7
        graphics.save();
        graphics.translate(-2, 0);  // Adjust the position to the left
        graphics.scale(0.7, 0.7);
        drawWeight("purple");

        // Draw the green weight on the right of the blue weight with scale 0.5
        graphics.save();
        graphics.translate(2, 0);  // Adjust the position to the right
        graphics.scale(0.5, 0.5);
        drawWeight("green");
        graphics.restore();
    }

    function updateFrame() {
        frameNumber++;
    }    

    function drawWeight(triangleColor) {
        graphics.save();  

        // Rotate the entire weight (rectangle with dodecagons) by -30 degrees
        graphics.translate(0, 1.625);  // Move to the center of the rectangle
        graphics.rotate(-20 * Math.PI / 180);  // Rotate by -30 degrees
        graphics.translate(0, -1.625);  // Move back

        // Draw the rotating dodecagons on the edges of the rectangle
        graphics.save();
        graphics.translate(-0.95, 1.6);
        rotatingDodecagon();
        graphics.restore();

        graphics.save();
        graphics.translate(0.95, 1.6);
        rotatingDodecagon();
        graphics.restore();

        // Draw the rectangle
        graphics.strokeStyle = "red";
        graphics.fillStyle = "red";  // Change back to red for the rectangle
        graphics.fillRect(-1, 1.5, 2, 0.20);

        graphics.restore();  // Restore to remove the rotation

        // Draw the base equilateral triangle with the top vertex at the center of the rectangle
        graphics.fillStyle = triangleColor;  // Change triangle color
        graphics.beginPath();
        graphics.moveTo(0, 1.625);  // Center of the rectangle
        graphics.lineTo(-0.25, 0.125);  // Adjusted base vertices
        graphics.lineTo(0.25, 0.125);
        graphics.closePath();
        graphics.fill();

        graphics.restore(); 
    }

    function rotatingDodecagon() {
        graphics.save();  
        graphics.strokeStyle = "black";  // Change dodecagon color to black
        graphics.rotate((frameNumber * 0.75) * Math.PI / 180);  
        graphics.scale(0.5, 0.5);  
        strokedDodecagon();  
        graphics.restore();  
    }

    function strokedDodecagon() {
        const sides = 12;
        const radius = 0.5;
        const centerX = 0;
        const centerY = 0;
        graphics.beginPath();
        let startX, startY;
        for (let i = 0; i < sides; i++) {
            const angle = (i * 2 * Math.PI) / sides;
            const x = radius * Math.cos(angle);
            const y = radius * Math.sin(angle);
            if (i === 0) {
                graphics.moveTo(x, y);
                startX = x;
                startY = y;
            } else {
                graphics.lineTo(x, y);
            }
            // Draw line from vertex to center
            graphics.moveTo(x, y);
            graphics.lineTo(centerX, centerY);
            graphics.moveTo(x, y);  // Move back to the vertex
        }
        graphics.lineTo(startX, startY); // Close the dodecagon
        graphics.closePath();
        graphics.stroke();
    }

    function draw() {
        graphics.save();  
        graphics.fillStyle = BACKGROUND;  
        graphics.fillRect(0,0,canvas.width,canvas.height);
        graphics.fillStyle = "black";
        applyLimits(graphics,X_LEFT,X_RIGHT,Y_TOP,Y_BOTTOM,false);
        graphics.lineWidth = pixelSize;  
        drawWorld();
        graphics.restore();
    }

    function applyLimits(g, xleft, xright, ytop, ybottom, preserveAspect) {
       var width = canvas.width;   
       var height = canvas.height; 
       if (preserveAspect) {
          var displayAspect = Math.abs(height / width);
          var requestedAspect = Math.abs(( ybottom-ytop ) / ( xright-xleft ));
          var excess;
          if (displayAspect > requestedAspect) {
             excess = (ybottom-ytop) * (displayAspect/requestedAspect - 1);
             ybottom += excess/2;
             ytop -= excess/2;
          }
          else if (displayAspect < requestedAspect) {
             excess = (xright-xleft) * (requestedAspect/displayAspect - 1);
             xright += excess/2;
             xleft -= excess/2;
          }
       }
       var pixelWidth = Math.abs(( xright - xleft ) / width);
       var pixelHeight = Math.abs(( ybottom - ytop ) / height);
       pixelSize = Math.min(pixelWidth,pixelHeight);
       g.scale( width / (xright-xleft), height / (ybottom-ytop) );
       g.translate( -xleft, -ytop );
    }
    
    //------------------ Animation framework ------------------------------
    
    var running = false; 
    
    function frame() {
        if (running) {
            updateFrame();
            draw();
            requestAnimationFrame(frame);
        }
    }
    
    function doAnimationCheckbox() { 
        var shouldRun = document.getElementById("animateCheck").checked;
        if ( shouldRun != running ) {
            running = shouldRun;
            if (running)
                requestAnimationFrame(frame);
        }
    }
    
    //----------------------- initialization -------------------------------

    function init() {
        canvas = document.getElementById("thecanvas");
        if (!canvas.getContext) {
            document.getElementById("message").innerHTML = "ERROR: Canvas not supported";
            return;
        }
        graphics = canvas.getContext("2d");
        document.getElementById("animateCheck").checked = false; 
        document.getElementById("animateCheck").onchange = doAnimationCheckbox; 
        draw();
    }

</script>

</head>

<body onload="init()" style="background-color:#EEEEEE">

<h3>Subroutine Hierarchy - Weight with Rotating Dodecagons</h3>

<noscript>
   <p><b style="color:red">Error: This page requires JavaScript, but it is not available.</b></p>
</noscript>

<p id="message"><label><input type="checkbox" id="animateCheck"><b>Run the Animation</b></label></p>

<div style="float:left; border: 2px solid black">
<canvas id="thecanvas" width="800" height="600" style="display:block"></canvas>
</div>

</body>
</html>
