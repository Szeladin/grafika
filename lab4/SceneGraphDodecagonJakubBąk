<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Scene Graph 2D</title>

<script>
    var canvas;   
    var graphics; 
    var X_LEFT = -4;    
    var X_RIGHT = 4;
    var Y_BOTTOM = -3;
    var Y_TOP = 3;
    var BACKGROUND = "white";  // The display is filled with this color before the scene is drawn.     
    var pixelSize;  // The size of one pixel, in the transformed coordinates.
            
    var frameNumber = 0;  // Current frame number. goes up by one in each frame.

    var world;  // A SceneGraphNode representing the entire scene. 
    var blueWeight, purpleWeight, greenWeight;

    function createWorld() {
        world = new CompoundObject();  // Root node for the scene graph.

        // Create the blue weight
        blueWeight = new TransformedObject(weight);
        blueWeight.setColor("blue");
        world.add(blueWeight);

        // Create the purple weight on the left with scale 0.7
        purpleWeight = new TransformedObject(weight);
        purpleWeight.setScale(0.7, 0.7).setTranslation(-2, 0).setColor("purple");
        world.add(purpleWeight);

        // Create the green weight on the right with scale 0.5
        greenWeight = new TransformedObject(weight);
        greenWeight.setScale(0.5, 0.5).setTranslation(2, 0).setColor("green");
        world.add(greenWeight);
    }
    
    function updateFrame() {
        frameNumber++;   
    }

    function SceneGraphNode() {
        this.fillColor = null;   // If non-null, the default fillStyle for this node.
        this.strokeColor = null; // If non-null, the default strokeStyle for this node.
    }
    SceneGraphNode.prototype.doDraw = function(g) {
        throw "doDraw not implemented in SceneGraphNode"
    }
    SceneGraphNode.prototype.draw = function(g) {
        g.save();
        if (this.fillColor) {
            g.fillStyle = this.fillColor;
        }
        if (this.strokeColor) {
            g.strokeStyle = this.strokeColor;
        }
        this.doDraw(g);
        g.restore();
    }
    SceneGraphNode.prototype.setFillColor = function(color) {
        this.fillColor = color;
        return this;
    }
    SceneGraphNode.prototype.setStrokeColor = function(color) {
        this.strokeColor = color;
        return this;
    }
    SceneGraphNode.prototype.setColor = function(color) {
        this.fillColor = color;
        this.strokeColor = color;
        return this;
    }

    function CompoundObject() {
        SceneGraphNode.call(this);
        this.subobjects = [];
    }
    CompoundObject.prototype = new SceneGraphNode();
    CompoundObject.prototype.add = function(node) {
        this.subobjects.push(node);
        return this;
    }
    CompoundObject.prototype.doDraw = function(g) {
        for (var i = 0; i < this.subobjects.length; i++)
            this.subobjects[i].draw(g);
    }

    function TransformedObject(object) {
        SceneGraphNode.call(this);
        this.object = object;
        this.rotationInDegrees = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.translateX = 0;
        this.translateY = 0;
    }
    TransformedObject.prototype = new SceneGraphNode();
    TransformedObject.prototype.setRotation = function(angle) {
        this.rotationInDegrees = angle;
        return this;
    }
    TransformedObject.prototype.setScale = function(sx, sy) {
        this.scaleX = sx;
        this.scaleY = sy;
        return this;
    }
    TransformedObject.prototype.setTranslation = function(dx, dy) {
        this.translateX = dx;
        this.translateY = dy;
        return this;
    }
    TransformedObject.prototype.doDraw = function(g) {
        g.save();
        if (this.translateX != 0 || this.translateY != 0) {
            g.translate(this.translateX, this.translateY);
        }
        if (this.rotationInDegrees != 0) {
            g.rotate(this.rotationInDegrees / 180 * Math.PI);
        }
        if (this.scaleX != 1 || this.scaleY != 1) {
            g.scale(this.scaleX, this.scaleY);
        }
        this.object.draw(g);
        g.restore();
    }

    var weight = new SceneGraphNode();
    weight.doDraw = function(g) {
        g.save();
        g.translate(0, 1.625);
        g.rotate(-20 * Math.PI / 180);
        g.translate(0, -1.625);

        g.save();
        g.translate(-0.95, 1.6);
        rotatingDodecagon(g);
        g.restore();

        g.save();
        g.translate(0.95, 1.6);
        rotatingDodecagon(g);
        g.restore();

        g.strokeStyle = "red";
        g.fillStyle = "red";
        g.fillRect(-1, 1.5, 2, 0.20);

        g.restore();

        g.fillStyle = this.fillColor;
        g.beginPath();
        g.moveTo(0, 1.625);
        g.lineTo(-0.25, 0.125);
        g.lineTo(0.25, 0.125);
        g.closePath();
        g.fill();
    }

    function rotatingDodecagon(g) {
        g.save();
        g.strokeStyle = "black";
        g.rotate((frameNumber * 0.75) * Math.PI / 180);
        g.scale(0.5, 0.5);
        strokedDodecagon(g);
        g.restore();
    }

    function strokedDodecagon(g) {
        const sides = 12;
        const radius = 0.5;
        const centerX = 0;
        const centerY = 0;
        g.beginPath();
        let startX, startY;
        for (let i = 0; i < sides; i++) {
            const angle = (i * 2 * Math.PI) / sides;
            const x = radius * Math.cos(angle);
            const y = radius * Math.sin(angle);
            if (i === 0) {
                g.moveTo(x, y);
                startX = x;
                startY = y;
            } else {
                g.lineTo(x, y);
            }
            g.moveTo(x, y);
            g.lineTo(centerX, centerY);
            g.moveTo(x, y);
        }
        g.lineTo(startX, startY);
        g.closePath();
        g.stroke();
    }

    function draw() {
        graphics.save();
        graphics.fillStyle = BACKGROUND;
        graphics.fillRect(0, 0, canvas.width, canvas.height);
        graphics.fillStyle = "black";
        applyLimits(graphics, X_LEFT, X_RIGHT, Y_TOP, Y_BOTTOM, false);
        graphics.lineWidth = pixelSize;
        world.draw(graphics);
        graphics.restore();
    }

    function applyLimits(g, xleft, xright, ytop, ybottom, preserveAspect) {
        var width = canvas.width;
        var height = canvas.height;
        if (preserveAspect) {
            var displayAspect = Math.abs(height / width);
            var requestedAspect = Math.abs((ybottom - ytop) / (xright - xleft));
            var excess;
            if (displayAspect > requestedAspect) {
                excess = (ybottom - ytop) * (displayAspect / requestedAspect - 1);
                ybottom += excess / 2;
                ytop -= excess / 2;
            } else if (displayAspect < requestedAspect) {
                excess = (xright - xleft) * (requestedAspect / displayAspect - 1);
                xright += excess / 2;
                xleft -= excess / 2;
            }
        }
        var pixelWidth = Math.abs((xright - xleft) / width);
        var pixelHeight = Math.abs((ybottom - ytop) / height);
        pixelSize = Math.min(pixelWidth, pixelHeight);
        g.scale(width / (xright - xleft), height / (ybottom - ytop));
        g.translate(-xleft, -ytop);
    }

    var running = false;

    function frame() {
        if (running) {
            updateFrame();
            draw();
            requestAnimationFrame(frame);
        }
    }

    function doAnimationCheckbox() {
        var shouldRun = document.getElementById("animateCheck").checked;
        if (shouldRun != running) {
            running = shouldRun;
            if (running)
                requestAnimationFrame(frame);
        }
    }

    function init() {
        canvas = document.getElementById("thecanvas");
        if (!canvas.getContext) {
            document.getElementById("message").innerHTML = "ERROR: Canvas not supported";
            return;
        }
        graphics = canvas.getContext("2d");
        document.getElementById("animateCheck").checked = false;
        document.getElementById("animateCheck").onchange = doAnimationCheckbox;
        createWorld();
        draw();
    }

</script>

</head>

<body onload="init()" style="background-color:#EEEEEE">

<h3>Scene Graph 2D</h3>

<noscript>
   <p><b style="color:red">Error: This page requires JavaScript, but it is not available.</b></p>
</noscript>

<p id="message"><label><input type="checkbox" id="animateCheck"><b>Run the Animation</b></label></p>

<div style="float:left; border: 2px solid black">
<canvas id="thecanvas" width="800" height="600" style="display:block"></canvas>
</div>

</body>
</html>
